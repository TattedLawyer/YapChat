name: YapChat Production Readiness Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY }}

jobs:
  production-readiness-tests:
    name: Production Readiness Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      # Use Supabase for testing (or local PostgreSQL with pgvector)
      postgres:
        image: ankane/pgvector
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: yapchat_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: frontend
      run: |
        npm ci
        npm audit --audit-level=high

    - name: Setup test database
      working-directory: frontend
      run: |
        # Create test database schema
        export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/yapchat_test"
        if [ -f "../database-schema.sql" ]; then
          psql $DATABASE_URL -f ../database-schema.sql
        fi
        if [ -f "../supabase-vector-setup.sql" ]; then
          psql $DATABASE_URL -f ../supabase-vector-setup.sql
        fi

    - name: Build application
      working-directory: frontend
      run: |
        npm run build
        npm run lint

    - name: Start test server
      working-directory: frontend
      run: |
        npm start &
        sleep 10
        # Wait for server to be ready
        curl --retry 10 --retry-delay 3 --retry-connrefused http://localhost:3000 || exit 1

    - name: Run production readiness tests
      working-directory: frontend
      run: |
        export API_BASE="http://localhost:3000/api"
        node test-production-readiness.js
      continue-on-error: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: production-readiness-results-${{ github.run_number }}
        path: |
          frontend/test-results-production-*.json
          frontend/monitoring-metrics-*.json
        retention-days: 30

    - name: Generate test report
      working-directory: frontend
      if: always()
      run: |
        # Generate markdown report from test results
        node -e "
          const fs = require('fs');
          const files = fs.readdirSync('.').filter(f => f.startsWith('test-results-production-'));
          if (files.length > 0) {
            const results = JSON.parse(fs.readFileSync(files[0], 'utf8'));
            let report = '# YapChat Production Readiness Test Results\n\n';
            report += \`**Test Run:** \${results.timestamp}\n\n\`;
            report += \`## Summary\n\`;
            report += \`- ‚úÖ Passed: \${results.overall.passed}\n\`;
            report += \`- ‚ùå Failed: \${results.overall.failed}\n\`;
            report += \`- ‚ö†Ô∏è Warnings: \${results.overall.warnings}\n\n\`;
            
            const passRate = results.overall.passed / (results.overall.passed + results.overall.failed) * 100;
            report += \`**Pass Rate:** \${passRate.toFixed(1)}%\n\n\`;
            
            if (results.overall.failed > 0) {
              report += \`## Failed Tests\n\`;
              Object.entries(results).forEach(([category, tests]) => {
                if (typeof tests === 'object' && category !== 'overall') {
                  Object.entries(tests).forEach(([test, result]) => {
                    if (!result.passed) {
                      report += \`- **\${category}:** \${test}\n\`;
                    }
                  });
                }
              });
              report += '\n';
            }
            
            const isProductionReady = passRate >= 85 && results.overall.failed === 0;
            report += \`## Production Readiness: \${isProductionReady ? '‚úÖ READY' : '‚ùå NOT READY'}\n\`;
            
            fs.writeFileSync('test-report.md', report);
          }
        "

    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('frontend/test-report.md')) {
            const report = fs.readFileSync('frontend/test-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
          }

    - name: Check production readiness gates
      working-directory: frontend
      run: |
        node -e "
          const fs = require('fs');
          const files = fs.readdirSync('.').filter(f => f.startsWith('test-results-production-'));
          if (files.length > 0) {
            const results = JSON.parse(fs.readFileSync(files[0], 'utf8'));
            const passRate = results.overall.passed / (results.overall.passed + results.overall.failed);
            const isProductionReady = passRate >= 0.85 && results.overall.failed === 0;
            
            console.log(\`Pass rate: \${(passRate * 100).toFixed(1)}%\`);
            console.log(\`Failed tests: \${results.overall.failed}\`);
            console.log(\`Production ready: \${isProductionReady}\`);
            
            if (!isProductionReady) {
              console.error('‚ùå Production readiness gates failed');
              process.exit(1);
            } else {
              console.log('‚úÖ Production readiness gates passed');
            }
          } else {
            console.error('‚ùå No test results found');
            process.exit(1);
          }
        "

  memory-performance-benchmark:
    name: Memory Performance Benchmark
    runs-on: ubuntu-latest
    needs: production-readiness-tests
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: frontend
      run: npm ci

    - name: Run memory performance benchmark
      working-directory: frontend
      run: |
        export API_BASE="http://localhost:3000/api"
        # Run extended performance tests
        node -e "
          const { runProductionReadinessTests, CONFIG } = require('./test-production-readiness.js');
          
          // Configure for performance testing
          CONFIG.CONCURRENT_USERS = 50;
          CONFIG.TEST_DURATION = 60000; // 1 minute
          
          runProductionReadinessTests()
            .then(() => console.log('‚úÖ Performance benchmark completed'))
            .catch(err => {
              console.error('‚ùå Performance benchmark failed:', err);
              process.exit(1);
            });
        "

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: performance-benchmark-${{ github.run_number }}
        path: frontend/test-results-production-*.json

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      working-directory: frontend
      run: npm ci

    - name: Run security audit
      working-directory: frontend
      run: |
        npm audit --audit-level=moderate
        npx audit-ci --moderate

    - name: Run dependency vulnerability check
      uses: actions/dependency-review-action@v4
      if: github.event_name == 'pull_request'

  cost-analysis:
    name: Cost Analysis
    runs-on: ubuntu-latest
    needs: production-readiness-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Analyze cost metrics
      working-directory: frontend
      run: |
        node -e "
          const fs = require('fs');
          const files = fs.readdirSync('.').filter(f => f.startsWith('test-results-production-'));
          
          if (files.length > 0) {
            const results = JSON.parse(fs.readFileSync(files[0], 'utf8'));
            
            // Extract cost metrics
            const costTests = Object.entries(results.performance || {})
              .filter(([key]) => key.includes('Cost'));
            
            console.log('üí∞ Cost Analysis Results:');
            costTests.forEach(([test, result]) => {
              if (result.details && result.details.metrics) {
                console.log(\`- \${test}: \${JSON.stringify(result.details.metrics)}\`);
              }
            });
            
            // Check if cost targets are met
            const costTargetMet = costTests.every(([, result]) => result.passed);
            if (!costTargetMet) {
              console.error('‚ùå Cost targets not met');
              process.exit(1);
            }
          }
        "

  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [production-readiness-tests, security-scan, cost-analysis]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check deployment readiness
      run: |
        echo "üöÄ All production readiness checks passed!"
        echo "‚úÖ Functional tests: PASSED"
        echo "‚úÖ Security scan: PASSED"  
        echo "‚úÖ Cost analysis: PASSED"
        echo ""
        echo "üéØ System is ready for production deployment"

    - name: Create deployment artifact
      run: |
        echo "{
          \"deployment_ready\": true,
          \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
          \"commit_sha\": \"${{ github.sha }}\",
          \"tests_passed\": true,
          \"security_cleared\": true,
          \"cost_optimized\": true
        }" > deployment-readiness.json

    - name: Upload deployment readiness
      uses: actions/upload-artifact@v4
      with:
        name: deployment-readiness-${{ github.run_number }}
        path: deployment-readiness.json 